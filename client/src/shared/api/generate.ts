/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * –î–æ–¥–∞—Ç–æ–∫ –ü–æ–º—ñ—á–Ω–∏–∫
 * –î–æ–¥–∞—Ç–æ–∫ –¥–ª—è –≤–µ–¥–µ–Ω–Ω—è –æ–±–ª—ñ–∫—É –º–∞–π–Ω–∞
 * OpenAPI spec version: 1.0
 */
import { createInstance } from "./api-instance";
import type { BodyType } from "./api-instance";
export type SocialDtoTelegram = { [key: string]: any };

export type SocialDtoInstagram = { [key: string]: any };

export type SocialDtoFb = { [key: string]: any };

export interface SocialDto {
  fb: SocialDtoFb;
  id: number;
  instagram: SocialDtoInstagram;
  telegram: SocialDtoTelegram;
  userId: number;
}

export interface PatchSocialDto {
  fb: string;
  instagram: string;
  telegram: string;
}

export interface ContactDtoSWActivate {
  activationLink: string;
}

export type ContactDtoSWPhone = { [key: string]: any };

export interface ContactDtoSW {
  phone: ContactDtoSWPhone;
}

export type PatchAccountDtoName = { [key: string]: any };

export type PatchAccountDtoLastName = { [key: string]: any };

export type PatchAccountDtoImg = { [key: string]: any };

export interface PatchAccountDto {
  img: PatchAccountDtoImg;
  lastName: PatchAccountDtoLastName;
  name: PatchAccountDtoName;
}

export type ProfileDtoSocial = { [key: string]: any };

export type ProfileDtoContact = { [key: string]: any };

export type ProfileDtoAccount = { [key: string]: any };

export interface UserDto {
  email: string;
  hash: string;
  id: number;
  isActivated: boolean;
  role: string;
  salt: string;
}

export interface ProfileDto {
  account: ProfileDtoAccount;
  contact: ProfileDtoContact;
  social: ProfileDtoSocial;
  user: UserDto;
}

export type AccountDtoName = { [key: string]: any };

export type AccountDtoLastName = { [key: string]: any };

export type AccountDtoImg = { [key: string]: any };

export interface AccountDto {
  id: number;
  img: AccountDtoImg;
  lastName: AccountDtoLastName;
  name: AccountDtoName;
  userId: number;
}

export interface ActivationLink {
  activationLink: string;
}

export interface GetSessionInfoDto {
  email: string;
  exp: number;
  iat: number;
  isActivated: boolean;
  role: string;
  userId: number;
}

export interface SingInBodyDto {
  email: string;
  password: string;
}

export interface SingUpBodyDto {
  email: string;
  password: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const authControllerSingUp = (
  singUpBodyDto: BodyType<SingUpBodyDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/sing-up`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: singUpBodyDto,
    },
    options,
  );
};

export const authControllerSingIn = (
  singInBodyDto: BodyType<SingInBodyDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/sing-in`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: singInBodyDto,
    },
    options,
  );
};

export const authControllerSingOut = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/auth/sing-out`, method: "POST" },
    options,
  );
};

export const authControllerGetSessionInfo = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetSessionInfoDto>(
    { url: `/auth/session`, method: "GET" },
    options,
  );
};

export const authControllerActivateMail = (
  activeLink: string,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<ActivationLink>(
    { url: `/auth/${activeLink}`, method: "GET" },
    options,
  );
};

export const accountControllerGetAccount = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<AccountDto>(
    { url: `/account`, method: "GET" },
    options,
  );
};

export const accountControllerPatchAccount = (
  patchAccountDto: BodyType<PatchAccountDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<AccountDto>(
    {
      url: `/account`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: patchAccountDto,
    },
    options,
  );
};

export const accountControllerGetAccountInfo = (
  id: string,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<ProfileDto>(
    { url: `/account/${id}`, method: "GET" },
    options,
  );
};

export const accountControllerDeleteUser = (
  id: string,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/account/${id}`, method: "DELETE" },
    options,
  );
};

export const accountControllerPatchContact = (
  contactDtoSW: BodyType<ContactDtoSW>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<ContactDtoSW>(
    {
      url: `/account/patch-contact`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: contactDtoSW,
    },
    options,
  );
};

export const accountControllerPatchVerifyPhone = (
  contactDtoSWActivate: BodyType<ContactDtoSWActivate>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<ContactDtoSWActivate>(
    {
      url: `/account/patch-contact-activate`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: contactDtoSWActivate,
    },
    options,
  );
};

export const accountControllerPatchSocial = (
  patchSocialDto: BodyType<PatchSocialDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<SocialDto>(
    {
      url: `/account/patch-social`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: patchSocialDto,
    },
    options,
  );
};

export type AuthControllerSingUpResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSingUp>>
>;
export type AuthControllerSingInResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSingIn>>
>;
export type AuthControllerSingOutResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSingOut>>
>;
export type AuthControllerGetSessionInfoResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetSessionInfo>>
>;
export type AuthControllerActivateMailResult = NonNullable<
  Awaited<ReturnType<typeof authControllerActivateMail>>
>;
export type AccountControllerGetAccountResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerGetAccount>>
>;
export type AccountControllerPatchAccountResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerPatchAccount>>
>;
export type AccountControllerGetAccountInfoResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerGetAccountInfo>>
>;
export type AccountControllerDeleteUserResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerDeleteUser>>
>;
export type AccountControllerPatchContactResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerPatchContact>>
>;
export type AccountControllerPatchVerifyPhoneResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerPatchVerifyPhone>>
>;
export type AccountControllerPatchSocialResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerPatchSocial>>
>;
